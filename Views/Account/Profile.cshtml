@model HotelManagementSite.Models.Domain.User
@{
    ViewData["Title"] = "Profile - " + Model?.Name;
    Layout = "_Layout";
}

@section Styles {
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --warning-gradient: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
            --glass-bg: rgba(255, 255, 255, 0.1);
            --glass-border: rgba(255, 255, 255, 0.2);
            --dark-glass-bg: rgba(0, 0, 0, 0.2);
            --dark-glass-border: rgba(255, 255, 255, 0.1);
        }

        .glass-morphism {
            background: var(--glass-bg);
            backdrop-filter: blur(20px);
            border: 1px solid var(--glass-border);
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
        }

        .dark .glass-morphism {
            background: var(--dark-glass-bg);
            border: 1px solid var(--dark-glass-border);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
        }

        .neon-glow {
            box-shadow: 0 0 20px rgba(102, 126, 234, 0.6), 
                        0 0 40px rgba(102, 126, 234, 0.4), 
                        0 0 60px rgba(102, 126, 234, 0.2);
        }

        .dark .neon-glow {
            box-shadow: 0 0 20px rgba(124, 113, 244, 0.6), 
                        0 0 40px rgba(124, 113, 244, 0.4), 
                        0 0 60px rgba(124, 113, 244, 0.2);
        }

        .gradient-text {
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            color: transparent;
        }

        .floating-animation {
            animation: float 6s ease-in-out infinite;
        }

        .pulse-animation {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }

        .slide-in-left {
            animation: slideInLeft 0.8s ease-out;
        }

        .slide-in-right {
            animation: slideInRight 0.8s ease-out;
        }

        .fade-in-up {
            animation: fadeInUp 1s ease-out;
        }

        .scale-in {
            animation: scaleIn 0.5s ease-out;
        }

        .rotate-in {
            animation: rotateIn 0.8s ease-out;
        }

        @@keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
        }

        @@keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: .5; }
        }

        @@keyframes slideInLeft {
            0% { transform: translateX(-100px); opacity: 0; }
            100% { transform: translateX(0); opacity: 1; }
        }

        @@keyframes slideInRight {
            0% { transform: translateX(100px); opacity: 0; }
            100% { transform: translateX(0); opacity: 1; }
        }

        @@keyframes fadeInUp {
            0% { transform: translateY(50px); opacity: 0; }
            100% { transform: translateY(0); opacity: 1; }
        }

        @@keyframes scaleIn {
            0% { transform: scale(0.8); opacity: 0; }
            100% { transform: scale(1); opacity: 1; }
        }

        @@keyframes rotateIn {
            0% { transform: rotate(-180deg) scale(0.8); opacity: 0; }
            100% { transform: rotate(0deg) scale(1); opacity: 1; }
        }

        @@keyframes shimmer {
            0% { background-position: -200px 0; }
            100% { background-position: calc(200px + 100%) 0; }
        }

        .shimmer-effect {
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            background-size: 200px 100%;
            animation: shimmer 2s infinite;
        }

        .profile-card {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .profile-card:hover {
            transform: translateY(-8px) scale(1.02);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }

        .progress-ring {
            transition: stroke-dasharray 0.5s ease-in-out;
        }

        .edit-mode {
            background: rgba(102, 126, 234, 0.1);
            border: 2px dashed rgba(102, 126, 234, 0.5);
            animation: editPulse 2s infinite;
        }

        @@keyframes editPulse {
            0%, 100% { border-color: rgba(102, 126, 234, 0.5); }
            50% { border-color: rgba(102, 126, 234, 0.8); }
        }

        .status-indicator {
            position: relative;
            overflow: hidden;
        }

        .status-indicator::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            animation: statusSweep 3s infinite;
        }

        @@keyframes statusSweep {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        .activity-timeline {
            position: relative;
        }

        .activity-timeline::before {
            content: '';
            position: absolute;
            left: 20px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: var(--primary-gradient);
        }

        .activity-item {
            position: relative;
            padding-left: 50px;
            margin-bottom: 30px;
        }

        .activity-item::before {
            content: '';
            position: absolute;
            left: 11px;
            top: 8px;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: var(--primary-gradient);
            border: 3px solid white;
            box-shadow: 0 0 10px rgba(102, 126, 234, 0.5);
        }

        .stats-counter {
            font-size: 2.5rem;
            font-weight: 700;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .verification-badge {
            position: relative;
            overflow: hidden;
        }

        .verification-badge.verified::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(34, 197, 94, 0.3), transparent);
            animation: verifiedSweep 2s infinite;
        }

        @@keyframes verifiedSweep {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        .skill-bar {
            height: 8px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
            overflow: hidden;
            position: relative;
        }

        .skill-progress {
            height: 100%;
            background: var(--primary-gradient);
            border-radius: 4px;
            position: relative;
            overflow: hidden;
        }

        .skill-progress::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            background-image: linear-gradient(
                -45deg,
                rgba(255, 255, 255, .2) 25%,
                transparent 25%,
                transparent 50%,
                rgba(255, 255, 255, .2) 50%,
                rgba(255, 255, 255, .2) 75%,
                transparent 75%,
                transparent
            );
            background-size: 50px 50px;
            animation: move 2s linear infinite;
        }

        @@keyframes move {
            0% { background-position: 0 0; }
            100% { background-position: 50px 50px; }
        }

        .floating-particles {
            position: absolute;
            width: 100%;
            height: 100%;
            overflow: hidden;
            pointer-events: none;
        }

        .particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: rgba(102, 126, 234, 0.6);
            border-radius: 50%;
            animation: floatParticle 8s infinite linear;
        }

        @@keyframes floatParticle {
            0% {
                transform: translateY(100vh) rotate(0deg);
                opacity: 0;
            }
            10% {
                opacity: 1;
            }
            90% {
                opacity: 1;
            }
            100% {
                transform: translateY(-100px) rotate(360deg);
                opacity: 0;
            }
        }

        .hologram-effect {
            position: relative;
            overflow: hidden;
        }

        .hologram-effect::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(0, 255, 255, 0.1), transparent);
            animation: hologramScan 3s infinite;
        }

        @@keyframes hologramScan {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        .data-visualization {
            background: radial-gradient(circle at center, rgba(102, 126, 234, 0.1) 0%, transparent 70%);
        }

        .interactive-button {
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .interactive-button::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: width 0.6s, height 0.6s;
        }

        .interactive-button:hover::before {
            width: 300px;
            height: 300px;
        }

        .cyber-grid {
            background-image: 
                linear-gradient(rgba(102, 126, 234, 0.1) 1px, transparent 1px),
                linear-gradient(90deg, rgba(102, 126, 234, 0.1) 1px, transparent 1px);
            background-size: 20px 20px;
        }

        .notification-dot {
            animation: notificationPulse 2s infinite;
        }

        @@keyframes notificationPulse {
            0% {
                transform: scale(1);
                opacity: 1;
            }
            50% {
                transform: scale(1.2);
                opacity: 0.7;
            }
            100% {
                transform: scale(1);
                opacity: 1;
            }
        }

        .loading-skeleton {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: loading 1.5s infinite;
        }

        @@keyframes loading {
            0% { background-position: 200% 0; }
            100% { background-position: -200% 0; }
        }

        .dark .loading-skeleton {
            background: linear-gradient(90deg, #374151 25%, #4b5563 50%, #374151 75%);
            background-size: 200% 100%;
        }
    </style>
}

<div class="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 dark:from-gray-900 dark:via-blue-900 dark:to-indigo-900 relative overflow-hidden">
    
    <!-- Floating Particles Background -->
    <div class="floating-particles">
        <div class="particle" style="left: 10%; animation-delay: 0s;"></div>
        <div class="particle" style="left: 20%; animation-delay: 1s;"></div>
        <div class="particle" style="left: 30%; animation-delay: 2s;"></div>
        <div class="particle" style="left: 40%; animation-delay: 3s;"></div>
        <div class="particle" style="left: 50%; animation-delay: 4s;"></div>
        <div class="particle" style="left: 60%; animation-delay: 5s;"></div>
        <div class="particle" style="left: 70%; animation-delay: 6s;"></div>
        <div class="particle" style="left: 80%; animation-delay: 7s;"></div>
        <div class="particle" style="left: 90%; animation-delay: 8s;"></div>
    </div>

    <!-- Cyber Grid Background -->
    <div class="cyber-grid absolute inset-0 opacity-30"></div>

    <div class="container mx-auto px-4 py-8 relative z-10">
        
        <!-- Profile Header Section -->
        <div class="glass-morphism rounded-3xl p-8 mb-8 neon-glow slide-in-left hologram-effect">
            <div class="flex flex-col lg:flex-row items-center lg:items-start gap-8">
                
                <!-- Profile Image Section -->
                <div class="relative group">
                    <div class="w-40 h-40 rounded-full bg-gradient-to-br from-blue-400 via-purple-500 to-pink-500 p-1 floating-animation">
                        <div class="w-full h-full rounded-full bg-white dark:bg-gray-800 flex items-center justify-center overflow-hidden">
                            @if (Model?.ProfileImage != null)
                            {
                                <img id="profileImage" 
                                     src="data:image/@(Model.ProfileImageType ?? "jpeg");base64,@Convert.ToBase64String(Model.ProfileImage)" 
                                     alt="@Model.Name" 
                                     class="w-full h-full object-cover rounded-full">
                            }
                            else
                            {
                                <div class="w-full h-full bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center">
                                    <svg class="w-20 h-20 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                    </svg>
                                </div>
                            }
                        </div>
                    </div>
                    
                    <!-- Edit Image Button -->
                    <button id="editImageBtn" class="absolute bottom-2 right-2 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white p-3 rounded-full shadow-lg transform hover:scale-110 transition-all duration-300 interactive-button">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"></path>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        </svg>
                    </button>
                    <input type="file" id="imageUpload" accept="image/*" class="hidden">
                    
                    <!-- Online Status Indicator -->
                    <div class="absolute top-2 right-2 w-6 h-6 bg-green-500 rounded-full border-4 border-white dark:border-gray-800 status-indicator">
                        <div class="notification-dot w-full h-full bg-green-500 rounded-full"></div>
                    </div>
                </div>

                <!-- Profile Information -->
                <div class="flex-1 text-center lg:text-left">
                    <div class="mb-6">
                        <h1 class="text-4xl lg:text-5xl font-bold gradient-text mb-2">@Model?.Name</h1>
                        <p class="text-xl text-gray-600 dark:text-gray-300 mb-4">@Model?.Email</p>
                        
                        <!-- Verification Badges -->
                        <div class="flex flex-wrap justify-center lg:justify-start gap-3 mb-6">
                            <div class="verification-badge verified bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-4 py-2 rounded-full text-sm font-medium flex items-center gap-2">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                Email Verified
                            </div>
                            
                            @if (!string.IsNullOrEmpty(Model?.PhoneNumber))
                            {
                                <div class="verification-badge verified bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-4 py-2 rounded-full text-sm font-medium flex items-center gap-2">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                                    </svg>
                                    Phone Verified
                                </div>
                            }
                            else
                            {
                                <div class="verification-badge bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 px-4 py-2 rounded-full text-sm font-medium flex items-center gap-2">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                                    </svg>
                                    Phone Pending
                                </div>
                            }
                        </div>

                        <!-- Profile Completion Progress -->
                        <div class="mb-6">
                            <div class="flex items-center justify-between mb-2">
                                <span class="text-sm font-medium text-gray-600 dark:text-gray-300">Profile Completion</span>
                                <span id="completionPercentage" class="text-sm font-bold gradient-text">0%</span>
                            </div>
                            <div class="skill-bar">
                                <div id="completionProgress" class="skill-progress" style="width: 0%"></div>
                            </div>
                            <p class="text-xs text-gray-500 dark:text-gray-400 mt-2">Complete your profile to unlock premium features</p>
                        </div>

                        <!-- Action Buttons -->
                        <div class="flex flex-wrap justify-center lg:justify-start gap-4">
                            <button id="editProfileBtn" class="interactive-button bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-8 py-3 rounded-xl font-semibold shadow-lg transform hover:scale-105 transition-all duration-300">
                                <span class="flex items-center gap-2">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                    </svg>
                                    Edit Profile
                                </span>
                            </button>
                            
                            <button class="interactive-button bg-gradient-to-r from-green-500 to-teal-600 hover:from-green-600 hover:to-teal-700 text-white px-8 py-3 rounded-xl font-semibold shadow-lg transform hover:scale-105 transition-all duration-300">
                                <span class="flex items-center gap-2">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4"></path>
                                    </svg>
                                    Settings
                                </span>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Stats Cards -->
                <div class="grid grid-cols-3 gap-4 lg:gap-6">
                    <div class="glass-morphism rounded-2xl p-4 text-center scale-in" style="animation-delay: 0.2s;">
                        <div class="stats-counter" id="bookingsCount">@(Model?.Bookings?.Count ?? 0)</div>
                        <div class="text-sm text-gray-600 dark:text-gray-300 font-medium">Bookings</div>
                    </div>
                    <div class="glass-morphism rounded-2xl p-4 text-center scale-in" style="animation-delay: 0.4s;">
                        <div class="stats-counter" id="reviewsCount">@(Model?.Reviews?.Count ?? 0)</div>
                        <div class="text-sm text-gray-600 dark:text-gray-300 font-medium">Reviews</div>
                    </div>
                    <div class="glass-morphism rounded-2xl p-4 text-center scale-in" style="animation-delay: 0.6s;">
                        <div class="stats-counter" id="accountsCount">@(Model?.Accounts?.Count ?? 0)</div>
                        <div class="text-sm text-gray-600 dark:text-gray-300 font-medium">Accounts</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content Grid -->
        <div class="grid grid-cols-1 xl:grid-cols-3 gap-8">
            
            <!-- Left Column - Personal Information -->
            <div class="xl:col-span-2 space-y-8">
                
                <!-- Personal Information Card -->
                <div class="glass-morphism rounded-3xl p-8 neon-glow slide-in-right profile-card">
                    <div class="flex items-center justify-between mb-8">
                        <h2 class="text-2xl font-bold gradient-text flex items-center gap-3">
                            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                            </svg>
                            Personal Information
                        </h2>
                        <button id="editPersonalBtn" class="interactive-button text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 p-2 rounded-lg hover:bg-blue-50 dark:hover:bg-blue-900 transition-all duration-300">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                            </svg>
                        </button>
                    </div>

                    <form id="profileForm" asp-controller="Account" asp-action="UpdateProfile" method="post" enctype="multipart/form-data">
                        <div id="personalInfo" class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            
                            <!-- Full Name -->
                            <div class="space-y-3">
                                <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300 flex items-center gap-2">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                    </svg>
                                    Full Name
                                </label>
                                <div class="glass-morphism rounded-xl px-4 py-4 border-2 border-transparent hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-300">
                                    <span id="displayName" class="text-gray-900 dark:text-white font-medium">@Model?.Name</span>
                                    <input type="text" id="editName" name="Name" class="hidden w-full bg-transparent border-none outline-none text-gray-900 dark:text-white font-medium" value="@Model?.Name">
                                </div>
                            </div>

                            <!-- Email -->
                            <div class="space-y-3">
                                <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300 flex items-center gap-2">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                    </svg>
                                    Email Address
                                </label>
                                <div class="glass-morphism rounded-xl px-4 py-4 border-2 border-green-300 dark:border-green-600">
                                    <span class="text-gray-900 dark:text-white font-medium flex items-center gap-2">
                                        @Model?.Email
                                        <svg class="w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        </svg>
                                    </span>
                                </div>
                            </div>

                            <!-- National ID -->
                            <div class="space-y-3">
                                <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300 flex items-center gap-2">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V4a2 2 0 114 0v2m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2"></path>
                                    </svg>
                                    National ID
                                </label>
                                <div class="glass-morphism rounded-xl px-4 py-4 border-2 border-transparent hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-300">
                                    <span id="displayNID" class="@(string.IsNullOrEmpty(Model?.NID) ? "text-gray-500 dark:text-gray-400 italic" : "text-gray-900 dark:text-white font-medium")">
                                        @(Model?.NID ?? "Not provided")
                                    </span>
                                    <input type="text" id="editNID" name="NID" class="hidden w-full bg-transparent border-none outline-none text-gray-900 dark:text-white font-medium" value="@Model?.NID" placeholder="Enter National ID">
                                </div>
                            </div>

                            <!-- Phone Number -->
                            <div class="space-y-3">
                                <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300 flex items-center gap-2">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                                    </svg>
                                    Phone Number
                                </label>
                                <div class="glass-morphism rounded-xl px-4 py-4 border-2 border-transparent hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-300">
                                    <span id="displayPhone" class="@(string.IsNullOrEmpty(Model?.PhoneNumber) ? "text-gray-500 dark:text-gray-400 italic" : "text-gray-900 dark:text-white font-medium")">
                                        @(Model?.PhoneNumber ?? "Not provided")
                                    </span>
                                    <input type="tel" id="editPhone" name="PhoneNumber" class="hidden w-full bg-transparent border-none outline-none text-gray-900 dark:text-white font-medium" value="@Model?.PhoneNumber" placeholder="Enter phone number">
                                </div>
                            </div>

                            <!-- Date of Birth -->
                            <div class="space-y-3">
                                <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300 flex items-center gap-2">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                    </svg>
                                    Date of Birth
                                </label>
                                <div class="glass-morphism rounded-xl px-4 py-4 border-2 border-transparent hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-300">
                                    <span id="displayDOB" class="@(Model?.DateOfBirth == null ? "text-gray-500 dark:text-gray-400 italic" : "text-gray-900 dark:text-white font-medium")">
                                        @(Model?.DateOfBirth?.ToString("MMM dd, yyyy") ?? "Not provided")
                                    </span>
                                    <input type="date" id="editDOB" name="DateOfBirth" class="hidden w-full bg-transparent border-none outline-none text-gray-900 dark:text-white font-medium" value="@Model?.DateOfBirth?.ToString("yyyy-MM-dd")">
                                </div>
                            </div>

                            <!-- Address -->
                            <div class="space-y-3">
                                <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300 flex items-center gap-2">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                    </svg>
                                    Address
                                </label>
                                <div class="glass-morphism rounded-xl px-4 py-4 border-2 border-transparent hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-300">
                                    <span id="displayAddress" class="@(string.IsNullOrEmpty(Model?.Address) ? "text-gray-500 dark:text-gray-400 italic" : "text-gray-900 dark:text-white font-medium")">
                                        @(Model?.Address ?? "Not provided")
                                    </span>
                                    <input type="text" id="editAddress" name="Address" class="hidden w-full bg-transparent border-none outline-none text-gray-900 dark:text-white font-medium" value="@Model?.Address" placeholder="Enter address">
                                </div>
                            </div>
                        </div>

                        <!-- About Section -->
                        <div class="mt-8 space-y-3">
                            <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300 flex items-center gap-2">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                                </svg>
                                About Me
                            </label>
                            <div class="glass-morphism rounded-xl px-4 py-4 border-2 border-transparent hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-300 min-h-[120px]">
                                <span id="displayAbout" class="@(string.IsNullOrEmpty(Model?.About) ? "text-gray-500 dark:text-gray-400 italic" : "text-gray-900 dark:text-white")">
                                    @(Model?.About ?? "Tell us about yourself...")
                                </span>
                                <textarea id="editAbout" name="About" class="hidden w-full bg-transparent border-none outline-none text-gray-900 dark:text-white resize-none" rows="4" placeholder="Tell us about yourself...">@Model?.About</textarea>
                            </div>
                        </div>

                        <!-- Edit Actions -->
                        <div id="editActions" class="hidden flex gap-4 mt-8 pt-8 border-t border-gray-200 dark:border-gray-700">
                            <button type="submit" id="saveChangesBtn" class="flex-1 interactive-button bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white py-4 px-6 rounded-xl font-semibold shadow-lg transform hover:scale-105 transition-all duration-300">
                                <span class="flex items-center justify-center gap-2">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                    </svg>
                                    Save Changes
                                </span>
                            </button>
                            <button type="button" id="cancelChangesBtn" class="flex-1 interactive-button bg-gradient-to-r from-gray-500 to-gray-600 hover:from-gray-600 hover:to-gray-700 text-white py-4 px-6 rounded-xl font-semibold shadow-lg transform hover:scale-105 transition-all duration-300">
                                <span class="flex items-center justify-center gap-2">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                    Cancel
                                </span>
                            </button>
                        </div>
                    </form>
                </div>

                <!-- Username & Login Information Card -->
                <div class="glass-morphism rounded-3xl p-8 neon-glow slide-in-right profile-card">
                    <div class="flex items-center justify-between mb-8">
                        <h2 class="text-2xl font-bold gradient-text flex items-center gap-3">
                            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-6 6c-3 0-5.5-1.5-5.5-4a3.5 3.5 0 117 0c0 2.5-2.5 4-5.5 4a6 6 0 01-6-6 2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                            </svg>
                            Login & Security
                        </h2>
                        <button id="editLoginBtn" class="interactive-button text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 p-2 rounded-lg hover:bg-blue-50 dark:hover:bg-blue-900 transition-all duration-300">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                            </svg>
                        </button>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <!-- Username -->
                        <div class="space-y-3">
                            <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300 flex items-center gap-2">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                </svg>
                                Username
                                <span class="text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full">Login ID</span>
                            </label>
                            <div class="glass-morphism rounded-xl px-4 py-4 border-2 border-transparent hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-300">
                                <span id="displayUsername" class="text-gray-900 dark:text-white font-medium">@ViewBag.Username</span>
                                <input type="text" id="editUsername" name="Username" class="hidden w-full bg-transparent border-none outline-none text-gray-900 dark:text-white font-medium" value="@ViewBag.Username">
                            </div>
                            <p class="text-xs text-gray-500 dark:text-gray-400">You can login using either username or email</p>
                        </div>

                        <!-- Login Email -->
                        <div class="space-y-3">
                            <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300 flex items-center gap-2">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                </svg>
                                Login Email
                                <span class="text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded-full">Verified</span>
                            </label>
                            <div class="glass-morphism rounded-xl px-4 py-4 border-2 border-green-300 dark:border-green-600">
                                <span class="text-gray-900 dark:text-white font-medium flex items-center gap-2">
                                    @Model?.Email
                                    <svg class="w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                </span>
                            </div>
                            <p class="text-xs text-gray-500 dark:text-gray-400">Primary email for account recovery</p>
                        </div>

                        <!-- Password Status -->
                        <div class="space-y-3">
                            <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300 flex items-center gap-2">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                                </svg>
                                Password
                            </label>
                            <div class="glass-morphism rounded-xl px-4 py-4 border-2 border-blue-300 dark:border-blue-600">
                                <div class="flex items-center justify-between">
                                    <span class="text-gray-900 dark:text-white font-medium">••••••••••••</span>
                                    <div class="flex gap-2">
                                        <button id="changePasswordModalBtn" class="interactive-button bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-4 py-2 rounded-lg text-sm font-semibold shadow-lg transform hover:scale-105 transition-all duration-300">
                                            Change
                                        </button>
                                        <button id="resetPasswordModalBtn" class="interactive-button bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700 text-white px-4 py-2 rounded-lg text-sm font-semibold shadow-lg transform hover:scale-105 transition-all duration-300">
                                            Reset
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <p class="text-xs text-gray-500 dark:text-gray-400">Last changed: @ViewBag.LastPasswordChange</p>
                        </div>

                        <!-- Two-Factor Authentication -->
                        <div class="space-y-3">
                            <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300 flex items-center gap-2">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                                </svg>
                                Two-Factor Authentication
                                @if (ViewBag.TwoFactorEnabled == true)
                                {
                                    <span class="text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded-full">Enabled</span>
                                }
                                else
                                {
                                    <span class="text-xs bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 px-2 py-1 rounded-full">Disabled</span>
                                }
                            </label>
                            <div class="glass-morphism rounded-xl px-4 py-4 border-2 @(ViewBag.TwoFactorEnabled == true ? "border-green-300 dark:border-green-600" : "border-yellow-300 dark:border-yellow-600") transition-all duration-300">
                                <div class="flex items-center justify-between">
                                    <span class="text-gray-900 dark:text-white font-medium">
                                        @(ViewBag.TwoFactorEnabled == true ? "Active Protection" : "Not Configured")
                                    </span>
                                    <button id="toggle2FABtn" class="interactive-button @(ViewBag.TwoFactorEnabled == true ? "bg-gradient-to-r from-red-500 to-pink-600 hover:from-red-600 hover:to-pink-700" : "bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700") text-white px-4 py-2 rounded-lg text-sm font-semibold shadow-lg transform hover:scale-105 transition-all duration-300">
                                        @(ViewBag.TwoFactorEnabled == true ? "Disable" : "Enable")
                                    </button>
                                </div>
                            </div>
                            <p class="text-xs text-gray-500 dark:text-gray-400">Add an extra layer of security to your account</p>
                        </div>
                    </div>
                </div>

                <!-- Activity Timeline -->
                <div class="glass-morphism rounded-3xl p-8 neon-glow fade-in-up profile-card">
                    <h2 class="text-2xl font-bold gradient-text mb-8 flex items-center gap-3">
                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        Recent Activity
                    </h2>
                    
                    <div class="activity-timeline">
                        @if (Model?.Bookings?.Any() == true)
                        {
                            @foreach (var booking in Model.Bookings.Take(5))
                            {
                                <div class="activity-item">
                                    <div class="glass-morphism rounded-xl p-4 hover:scale-105 transition-all duration-300">
                                        <div class="flex items-center justify-between">
                                            <div class="flex items-center gap-4">
                                                <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                                                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                                    </svg>
                                                </div>
                                                <div>
                                                    <p class="font-semibold text-gray-900 dark:text-white">New Booking Confirmed</p>
                                                    <p class="text-sm text-gray-600 dark:text-gray-400">Booking ID: #@booking.Id</p>
                                                </div>
                                            </div>
                                            <span class="text-xs text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-800 px-3 py-1 rounded-full">Recent</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-12">
                                <div class="w-24 h-24 bg-gradient-to-br from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
                                    <svg class="w-12 h-12 text-gray-400 dark:text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                </div>
                                <p class="text-gray-500 dark:text-gray-400 text-lg">No recent activity</p>
                                <p class="text-gray-400 dark:text-gray-500 text-sm mt-2">Your activity will appear here</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Right Column - Sidebar -->
            <div class="space-y-8">
                
                <!-- Account Security -->
                <div class="glass-morphism rounded-3xl p-6 neon-glow slide-in-right profile-card" style="animation-delay: 0.3s;">
                    <h3 class="text-xl font-bold gradient-text mb-6 flex items-center gap-3">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                        </svg>
                        Security Status
                    </h3>
                    
                    <div class="space-y-4">
                        <div class="glass-morphism rounded-xl p-4 border-2 border-green-300 dark:border-green-600">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center gap-3">
                                    <div class="w-10 h-10 bg-green-500 rounded-full flex items-center justify-center">
                                        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                        </svg>
                                    </div>
                                    <div>
                                        <p class="font-semibold text-gray-900 dark:text-white">Email Verified</p>
                                        <p class="text-xs text-gray-600 dark:text-gray-400">Secure & Protected</p>
                                    </div>
                                </div>
                                <div class="w-3 h-3 bg-green-500 rounded-full notification-dot"></div>
                            </div>
                        </div>
                        
                        <div class="glass-morphism rounded-xl p-4 border-2 @(string.IsNullOrEmpty(Model?.PhoneNumber) ? "border-yellow-300 dark:border-yellow-600" : "border-green-300 dark:border-green-600")">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center gap-3">
                                    <div class="w-10 h-10 @(string.IsNullOrEmpty(Model?.PhoneNumber) ? "bg-yellow-500" : "bg-green-500") rounded-full flex items-center justify-center">
                                        @if (string.IsNullOrEmpty(Model?.PhoneNumber))
                                        {
                                            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                                            </svg>
                                        }
                                        else
                                        {
                                            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                            </svg>
                                        }
                                    </div>
                                    <div>
                                        <p class="font-semibold text-gray-900 dark:text-white">Phone @(string.IsNullOrEmpty(Model?.PhoneNumber) ? "Pending" : "Verified")</p>
                                        <p class="text-xs text-gray-600 dark:text-gray-400">@(string.IsNullOrEmpty(Model?.PhoneNumber) ? "Add phone for security" : "Two-factor ready")</p>
                                    </div>
                                </div>
                                @if (string.IsNullOrEmpty(Model?.PhoneNumber))
                                {
                                    <button class="interactive-button text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 text-sm font-semibold px-3 py-1 rounded-lg hover:bg-blue-50 dark:hover:bg-blue-900 transition-all duration-300">
                                        Add Phone
                                    </button>
                                }
                            </div>
                        </div>
                        
                        <div class="glass-morphism rounded-xl p-4 border-2 border-blue-300 dark:border-blue-600">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center gap-3">
                                    <div class="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center">
                                        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                                        </svg>
                                    </div>
                                    <div>
                                        <p class="font-semibold text-gray-900 dark:text-white">Password Security</p>
                                        <p class="text-xs text-gray-600 dark:text-gray-400">Last changed: Never</p>
                                    </div>
                                </div>
                                <div class="flex gap-2">
                                    <button id="changePasswordBtn" class="interactive-button text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 text-sm font-semibold px-3 py-1 rounded-lg hover:bg-blue-50 dark:hover:bg-blue-900 transition-all duration-300">
                                        Change
                                    </button>
                                    <button id="resetPasswordBtn" class="interactive-button text-orange-500 hover:text-orange-600 dark:text-orange-400 dark:hover:text-orange-300 text-sm font-semibold px-3 py-1 rounded-lg hover:bg-orange-50 dark:hover:bg-orange-900 transition-all duration-300">
                                        Reset
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Data Insights -->
                <div class="glass-morphism rounded-3xl p-6 neon-glow slide-in-right profile-card data-visualization" style="animation-delay: 0.4s;">
                    <h3 class="text-xl font-bold gradient-text mb-6 flex items-center gap-3">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 00-2-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                        </svg>
                        Account Insights
                    </h3>
                    
                    <div class="space-y-6">
                        <!-- Profile Completion -->
                        <div>
                            <div class="flex items-center justify-between mb-2">
                                <span class="text-sm font-medium text-gray-600 dark:text-gray-300">Profile Strength</span>
                                <span class="text-sm font-bold gradient-text" id="profileStrength">0%</span>
                            </div>
                            <div class="skill-bar">
                                <div class="skill-progress" id="profileStrengthBar" style="width: 0%"></div>
                            </div>
                        </div>
                        
                        <!-- Activity Level -->
                        <div>
                            <div class="flex items-center justify-between mb-2">
                                <span class="text-sm font-medium text-gray-600 dark:text-gray-300">Activity Level</span>
                                <span class="text-sm font-bold gradient-text">@(Model?.Bookings?.Count > 5 ? "High" : Model?.Bookings?.Count > 2 ? "Medium" : "Low")</span>
                            </div>
                            <div class="skill-bar">
                                <div class="skill-progress" style="width: @(Model?.Bookings?.Count > 5 ? "90%" : Model?.Bookings?.Count > 2 ? "60%" : "30%")"></div>
                            </div>
                        </div>
                        
                        <!-- Trust Score -->
                        <div>
                            <div class="flex items-center justify-between mb-2">
                                <span class="text-sm font-medium text-gray-600 dark:text-gray-300">Trust Score</span>
                                <span class="text-sm font-bold gradient-text">@(Model?.Reviews?.Count > 3 ? "Excellent" : Model?.Reviews?.Count > 1 ? "Good" : "Building")</span>
                            </div>
                            <div class="skill-bar">
                                <div class="skill-progress" style="width: @(Model?.Reviews?.Count > 3 ? "95%" : Model?.Reviews?.Count > 1 ? "75%" : "45%")"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="glass-morphism rounded-3xl p-6 neon-glow slide-in-right profile-card" style="animation-delay: 0.5s;">
                    <h3 class="text-xl font-bold gradient-text mb-6 flex items-center gap-3">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                        </svg>
                        Quick Actions
                    </h3>
                    
                    <div class="space-y-3">
                        <a href="#" class="interactive-button w-full flex items-center gap-4 p-4 glass-morphism rounded-xl hover:scale-105 transition-all duration-300 group">
                            <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center group-hover:scale-110 transition-all duration-300">
                                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                            </div>
                            <div class="flex-1">
                                <p class="font-semibold text-gray-900 dark:text-white">My Bookings</p>
                                <p class="text-sm text-gray-600 dark:text-gray-400">View & manage reservations</p>
                            </div>
                            <svg class="w-5 h-5 text-gray-400 group-hover:text-blue-500 transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                            </svg>
                        </a>
                        
                        <a href="#" class="interactive-button w-full flex items-center gap-4 p-4 glass-morphism rounded-xl hover:scale-105 transition-all duration-300 group">
                            <div class="w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl flex items-center justify-center group-hover:scale-110 transition-all duration-300">
                                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>
                                </svg>
                            </div>
                            <div class="flex-1">
                                <p class="font-semibold text-gray-900 dark:text-white">My Reviews</p>
                                <p class="text-sm text-gray-600 dark:text-gray-400">Rate & review experiences</p>
                            </div>
                            <svg class="w-5 h-5 text-gray-400 group-hover:text-purple-500 transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                            </svg>
                        </a>
                        
                        <a href="#" class="interactive-button w-full flex items-center gap-4 p-4 glass-morphism rounded-xl hover:scale-105 transition-all duration-300 group">
                            <div class="w-12 h-12 bg-gradient-to-br from-green-500 to-teal-600 rounded-xl flex items-center justify-center group-hover:scale-110 transition-all duration-300">
                                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                </svg>
                            </div>
                            <div class="flex-1">
                                <p class="font-semibold text-gray-900 dark:text-white">Account Settings</p>
                                <p class="text-sm text-gray-600 dark:text-gray-400">Privacy & preferences</p>
                            </div>
                            <svg class="w-5 h-5 text-gray-400 group-hover:text-green-500 transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                            </svg>
                        </a>
                        
                        <a href="#" class="interactive-button w-full flex items-center gap-4 p-4 glass-morphism rounded-xl hover:scale-105 transition-all duration-300 group">
                            <div class="w-12 h-12 bg-gradient-to-br from-orange-500 to-red-600 rounded-xl flex items-center justify-center group-hover:scale-110 transition-all duration-300">
                                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192L5.636 18.364M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-5 0a4 4 0 11-8 0 4 4 0 018 0z"></path>
                                </svg>
                            </div>
                            <div class="flex-1">
                                <p class="font-semibold text-gray-900 dark:text-white">Help & Support</p>
                                <p class="text-sm text-gray-600 dark:text-gray-400">Get assistance</p>
                            </div>
                            <svg class="w-5 h-5 text-gray-400 group-hover:text-orange-500 transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                            </svg>
                        </a>
                    </div>
                </div>

                <!-- Connected Accounts -->
                <div class="glass-morphism rounded-3xl p-6 neon-glow slide-in-right profile-card" style="animation-delay: 0.6s;">
                    <h3 class="text-xl font-bold gradient-text mb-6 flex items-center gap-3">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                        </svg>
                        Connected Accounts
                    </h3>
                    
                    <div class="space-y-4">
                        <div class="glass-morphism rounded-xl p-4 border-2 border-green-300 dark:border-green-600">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center gap-3">
                                    <div class="w-10 h-10 bg-gradient-to-br from-red-500 to-red-600 rounded-full flex items-center justify-center">
                                        <svg class="w-5 h-5 text-white" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                                            <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                                            <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                                            <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                                        </svg>
                                    </div>
                                    <div>
                                        <p class="font-semibold text-gray-900 dark:text-white">Google</p>
                                        <p class="text-xs text-gray-600 dark:text-gray-400">Connected & Synced</p>
                                    </div>
                                </div>
                                <div class="flex items-center gap-2">
                                    <div class="w-3 h-3 bg-green-500 rounded-full notification-dot"></div>
                                    <span class="text-xs text-green-600 dark:text-green-400 font-semibold">Active</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="glass-morphism rounded-xl p-4 border-2 border-gray-300 dark:border-gray-600">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center gap-3">
                                    <div class="w-10 h-10 bg-gradient-to-br from-blue-600 to-blue-700 rounded-full flex items-center justify-center">
                                        <svg class="w-5 h-5 text-white" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                                        </svg>
                                    </div>
                                    <div>
                                        <p class="font-semibold text-gray-900 dark:text-white">Facebook</p>
                                        <p class="text-xs text-gray-600 dark:text-gray-400">Not connected</p>
                                    </div>
                                </div>
                                <button class="interactive-button text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 text-sm font-semibold px-3 py-1 rounded-lg hover:bg-blue-50 dark:hover:bg-blue-900 transition-all duration-300">
                                    Connect
                                </button>
                            </div>
                        </div>
                        
                        <div class="glass-morphism rounded-xl p-4 border-2 border-gray-300 dark:border-gray-600">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center gap-3">
                                    <div class="w-10 h-10 bg-gradient-to-br from-blue-700 to-blue-800 rounded-full flex items-center justify-center">
                                        <svg class="w-5 h-5 text-white" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                                        </svg>
                                    </div>
                                    <div>
                                        <p class="font-semibold text-gray-900 dark:text-white">LinkedIn</p>
                                        <p class="text-xs text-gray-600 dark:text-gray-400">Not connected</p>
                                    </div>
                                </div>
                                <button class="interactive-button text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 text-sm font-semibold px-3 py-1 rounded-lg hover:bg-blue-50 dark:hover:bg-blue-900 transition-all duration-300">
                                    Connect
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Change Password Modal -->
        <div id="changePasswordModal" class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-50 hidden flex items-center justify-center p-4">
            <div class="glass-morphism rounded-3xl p-8 max-w-md w-full neon-glow scale-in">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-2xl font-bold gradient-text flex items-center gap-3">
                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                        </svg>
                        Change Password
                    </h3>
                    <button id="closeChangePasswordModal" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors duration-300">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>

                <form id="changePasswordForm" asp-controller="Account" asp-action="ChangePassword" method="post">
                    <div class="space-y-6">
                        <div class="space-y-3">
                            <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300">Current Password</label>
                            <div class="glass-morphism rounded-xl px-4 py-4 border-2 border-transparent hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-300">
                                <input type="password" name="CurrentPassword" required class="w-full bg-transparent border-none outline-none text-gray-900 dark:text-white font-medium" placeholder="Enter current password">
                            </div>
                        </div>

                        <div class="space-y-3">
                            <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300">New Password</label>
                            <div class="glass-morphism rounded-xl px-4 py-4 border-2 border-transparent hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-300">
                                <input type="password" name="NewPassword" required class="w-full bg-transparent border-none outline-none text-gray-900 dark:text-white font-medium" placeholder="Enter new password">
                            </div>
                        </div>

                        <div class="space-y-3">
                            <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300">Confirm New Password</label>
                            <div class="glass-morphism rounded-xl px-4 py-4 border-2 border-transparent hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-300">
                                <input type="password" name="ConfirmPassword" required class="w-full bg-transparent border-none outline-none text-gray-900 dark:text-white font-medium" placeholder="Confirm new password">
                            </div>
                        </div>

                        <div class="flex gap-4 pt-6">
                            <button type="submit" class="flex-1 interactive-button bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white py-4 px-6 rounded-xl font-semibold shadow-lg transform hover:scale-105 transition-all duration-300">
                                <span class="flex items-center justify-center gap-2">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                    </svg>
                                    Update Password
                                </span>
                            </button>
                            <button type="button" id="cancelChangePassword" class="flex-1 interactive-button bg-gradient-to-r from-gray-500 to-gray-600 hover:from-gray-600 hover:to-gray-700 text-white py-4 px-6 rounded-xl font-semibold shadow-lg transform hover:scale-105 transition-all duration-300">
                                Cancel
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <!-- Reset Password Modal -->
        <div id="resetPasswordModal" class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-50 hidden flex items-center justify-center p-4">
            <div class="glass-morphism rounded-3xl p-8 max-w-md w-full neon-glow scale-in">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-2xl font-bold gradient-text flex items-center gap-3">
                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                        </svg>
                        Reset Password
                    </h3>
                    <button id="closeResetPasswordModal" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors duration-300">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>

                <div class="text-center mb-6">
                    <div class="w-20 h-20 bg-gradient-to-br from-orange-500 to-red-600 rounded-full flex items-center justify-center mx-auto mb-4">
                        <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                        </svg>
                    </div>
                    <p class="text-gray-600 dark:text-gray-300 mb-4">
                        A password reset link will be sent to your email address. This will log you out of all devices.
                    </p>
                    <p class="text-sm text-gray-500 dark:text-gray-400">
                        Email: <span class="font-semibold">@Model?.Email</span>
                    </p>
                </div>

                <form id="resetPasswordForm" asp-controller="Account" asp-action="ResetPassword" method="post">
                    <div class="flex gap-4">
                        <button type="submit" class="flex-1 interactive-button bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700 text-white py-4 px-6 rounded-xl font-semibold shadow-lg transform hover:scale-105 transition-all duration-300">
                            <span class="flex items-center justify-center gap-2">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                </svg>
                                Send Reset Link
                            </span>
                        </button>
                        <button type="button" id="cancelResetPassword" class="flex-1 interactive-button bg-gradient-to-r from-gray-500 to-gray-600 hover:from-gray-600 hover:to-gray-700 text-white py-4 px-6 rounded-xl font-semibold shadow-lg transform hover:scale-105 transition-all duration-300">
                            Cancel
                        </button>
                    </div>
                </form>
            </div>
        </div>

@section Scripts {
    <script>
        class FuturisticProfileManager {
            constructor() {
                this.isEditMode = false;
                this.userData = {
                    name: '@Html.Raw(Model?.Name ?? "")',
                    email: '@Html.Raw(Model?.Email ?? "")',
                    nid: '@Html.Raw(Model?.NID ?? "")',
                    phone: '@Html.Raw(Model?.PhoneNumber ?? "")',
                    dateOfBirth: '@Html.Raw(Model?.DateOfBirth?.ToString("yyyy-MM-dd") ?? "")',
                    address: '@Html.Raw(Model?.Address ?? "")',
                    about: '@Html.Raw(Model?.About ?? "")',
                    profileImage: @(Model?.ProfileImage != null ? "true" : "false")
                };
                
                this.init();
            }

            init() {
                this.bindEvents();
                this.calculateProfileCompletion();
                this.animateCounters();
                this.initParticles();
                this.setupIntersectionObserver();
            }

            bindEvents() {
                // Edit buttons
                document.getElementById('editPersonalBtn')?.addEventListener('click', () => this.toggleEditMode());
                document.getElementById('editProfileBtn')?.addEventListener('click', () => this.toggleEditMode());
                
                // Action buttons
                document.getElementById('saveChangesBtn')?.addEventListener('click', (e) => this.handleSubmit(e));
                document.getElementById('cancelChangesBtn')?.addEventListener('click', () => this.cancelChanges());
                
                // Image upload
                document.getElementById('editImageBtn')?.addEventListener('click', () => {
                    document.getElementById('imageUpload')?.click();
                });
                
                document.getElementById('imageUpload')?.addEventListener('change', (e) => this.handleImageUpload(e));

                // Add ripple effect to interactive buttons
                document.querySelectorAll('.interactive-button').forEach(button => {
                    button.addEventListener('click', this.createRipple);
                });

                // Add modal functionality
                document.getElementById('changePasswordModalBtn')?.addEventListener('click', () => this.showModal('changePasswordModal'));
                document.getElementById('resetPasswordModalBtn')?.addEventListener('click', () => this.showModal('resetPasswordModal'));
                document.getElementById('closeChangePasswordModal')?.addEventListener('click', () => this.hideModal('changePasswordModal'));
                document.getElementById('closeResetPasswordModal')?.addEventListener('click', () => this.hideModal('resetPasswordModal'));
                document.getElementById('cancelChangePassword')?.addEventListener('click', () => this.hideModal('changePasswordModal'));
                document.getElementById('cancelResetPassword')?.addEventListener('click', () => this.hideModal('resetPasswordModal'));
            }

            // Add these methods to the FuturisticProfileManager class:
            showModal(modalId) {
                const modal = document.getElementById(modalId);
                if (modal) {
                    modal.classList.remove('hidden');
                    document.body.style.overflow = 'hidden';
                    
                    // Add entrance animation
                    const modalContent = modal.querySelector('.glass-morphism');
                    if (modalContent) {
                        modalContent.style.transform = 'scale(0.8)';
                        modalContent.style.opacity = '0';
                        
                        setTimeout(() => {
                            modalContent.style.transform = 'scale(1)';
                            modalContent.style.opacity = '1';
                            modalContent.style.transition = 'all 0.3s ease-out';
                        }, 10);
                    }
                }
            }

            hideModal(modalId) {
                const modal = document.getElementById(modalId);
                if (modal) {
                    const modalContent = modal.querySelector('.glass-morphism');
                    if (modalContent) {
                        modalContent.style.transform = 'scale(0.8)';
                        modalContent.style.opacity = '0';
                        
                        setTimeout(() => {
                            modal.classList.add('hidden');
                            document.body.style.overflow = 'auto';
                        }, 300);
                    }
                }
            }

            toggleEditMode() {
                this.isEditMode = !this.isEditMode;
                const personalInfo = document.getElementById('personalInfo');
                const editActions = document.getElementById('editActions');
                
                if (this.isEditMode) {
                    personalInfo?.classList.add('edit-mode');
                    editActions?.classList.remove('hidden');
                    this.showEditFields();
                    this.showNotification('Edit mode activated', 'info');
                } else {
                    personalInfo?.classList.remove('edit-mode');
                    editActions?.classList.add('hidden');
                    this.hideEditFields();
                }
            }

            showEditFields() {
                const fields = ['Name', 'NID', 'Phone', 'DOB', 'Address', 'About'];
                
                fields.forEach(field => {
                    const displayElement = document.getElementById(`display${field}`);
                    const editElement = document.getElementById(`edit${field}`);
                    
                    if (displayElement && editElement) {
                        displayElement.classList.add('hidden');
                        editElement.classList.remove('hidden');
                        editElement.focus();
                        
                        // Add glow effect to focused input
                        editElement.classList.add('input-glow');
                    }
                });
            }

            hideEditFields() {
                const fields = ['Name', 'NID', 'Phone', 'DOB', 'Address', 'About'];
                
                fields.forEach(field => {
                    const displayElement = document.getElementById(`display${field}`);
                    const editElement = document.getElementById(`edit${field}`);
                    
                    if (displayElement && editElement) {
                        displayElement.classList.remove('hidden');
                        editElement.classList.add('hidden');
                        editElement.classList.remove('input-glow');
                    }
                });
            }

            handleSubmit(e) {
                e.preventDefault();
                
                // Show loading state with futuristic animation
                const submitBtn = document.getElementById('saveChangesBtn');
                const originalContent = submitBtn.innerHTML;
                
                submitBtn.innerHTML = `
                    <span class="flex items-center justify-center gap-3">
                        <div class="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        <span>Updating Profile...</span>
                        <div class="w-2 h-2 bg-white rounded-full animate-pulse"></div>
                    </span>
                `;
                submitBtn.disabled = true;

                // Add shimmer effect
                submitBtn.classList.add('shimmer-effect');

                // Simulate processing time
                setTimeout(() => {
                    document.getElementById('profileForm').submit();
                }, 1000);
            }

            cancelChanges() {
                this.toggleEditMode();
                this.showNotification('Changes cancelled', 'warning');
                
                // Reset form values
                const fields = ['Name', 'NID', 'Phone', 'DOB', 'Address', 'About'];
                fields.forEach(field => {
                    const editElement = document.getElementById(`edit${field}`);
                    if (editElement) {
                        if (field === 'Name') {
                            editElement.value = this.userData.name;
                        } else if (field === 'NID') {
                            editElement.value = this.userData.nid || '';
                        } else if (field === 'Phone') {
                            editElement.value = this.userData.phone || '';
                        } else if (field === 'DOB') {
                            editElement.value = this.userData.dateOfBirth || '';
                        } else if (field === 'Address') {
                            editElement.value = this.userData.address || '';
                        } else if (field === 'About') {
                            editElement.value = this.userData.about || '';
                        }
                    }
                });
            }

            calculateProfileCompletion() {
                const fields = ['name', 'email', 'nid', 'phone', 'dateOfBirth', 'address', 'about', 'profileImage'];
                const completedFields = fields.filter(field => {
                    if (field === 'profileImage') return this.userData[field];
                    return this.userData[field] !== null && this.userData[field] !== '';
                }).length;
                const percentage = Math.round((completedFields / fields.length) * 100);
                
                // Animate progress bars
                this.animateProgressBar('completionProgress', percentage);
                this.animateProgressBar('profileStrengthBar', percentage);
                
                // Update percentage displays
                document.getElementById('completionPercentage').textContent = `${percentage}%`;
                document.getElementById('profileStrength').textContent = `${percentage}%`;
            }

            animateProgressBar(elementId, targetWidth) {
                const element = document.getElementById(elementId);
                if (!element) return;
                
                let currentWidth = 0;
                const increment = targetWidth / 50; // 50 steps for smooth animation
                
                const animate = () => {
                    if (currentWidth < targetWidth) {
                        currentWidth += increment;
                        element.style.width = `${Math.min(currentWidth, targetWidth)}%`;
                        requestAnimationFrame(animate);
                    }
                };
                
                animate();
            }

            animateCounters() {
                const counters = document.querySelectorAll('.stats-counter');
                
                counters.forEach(counter => {
                    const target = parseInt(counter.textContent);
                    let current = 0;
                    const increment = target / 30; // 30 steps
                    
                    const updateCounter = () => {
                        if (current < target) {
                            current += increment;
                            counter.textContent = Math.ceil(current);
                            requestAnimationFrame(updateCounter);
                        } else {
                            counter.textContent = target;
                        }
                    };
                    
                    // Start animation after a delay
                    setTimeout(updateCounter, Math.random() * 1000);
                });
            }

            handleImageUpload(event) {
                const file = event.target.files[0];
                if (file) {
                    // Validate file size (max 5MB)
                    if (file.size > 5 * 1024 * 1024) {
                        this.showNotification('File size must be less than 5MB', 'error');
                        return;
                    }
                    
                    // Validate file type
                    if (!file.type.startsWith('image/')) {
                        this.showNotification('Please select a valid image file', 'error');
                        return;
                    }
                    
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const profileImage = document.getElementById('profileImage');
                        const container = profileImage ? profileImage.parentElement : document.querySelector('.w-40.h-40 .w-full.h-full');
                        
                        if (container) {
                            container.innerHTML = `<img id="profileImage" src="${e.target.result}" alt="Profile" class="w-full h-full object-cover rounded-full">`;
                        }
                        
                        this.userData.profileImage = true;
                        this.calculateProfileCompletion();
                        this.showNotification('Profile image updated successfully!', 'success');
                    };
                    reader.readAsDataURL(file);
                }
            }

            showNotification(message, type = 'info') {
                const notification = document.createElement('div');
                const colors = {
                    success: 'from-green-500 to-emerald-600',
                    error: 'from-red-500 to-pink-600',
                    warning: 'from-yellow-500 to-orange-600',
                    info: 'from-blue-500 to-purple-600'
                };
                
                const icons = {
                    success: 'M5 13l4 4L19 7',
                    error: 'M6 18L18 6M6 6l12 12',
                    warning: 'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z',
                    info: 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'
                };
                
                notification.className = `fixed top-6 right-6 bg-gradient-to-r ${colors[type]} text-white px-6 py-4 rounded-2xl shadow-2xl z-50 transform translate-x-full transition-all duration-500 ease-out glass-morphism neon-glow`;
                notification.innerHTML = `
                    <div class="flex items-center gap-3">
                        <svg class="w-6 h-6 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${icons[type]}"></path>
                        </svg>
                        <span class="font-semibold">${message}</span>
                        <button class="ml-2 hover:bg-white hover:bg-opacity-20 rounded-full p-1 transition-all duration-200" onclick="this.parentElement.parentElement.remove()">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                `;
                
                document.body.appendChild(notification);
                
                // Slide in animation
                setTimeout(() => {
                    notification.classList.remove('translate-x-full');
                }, 100);
                
                // Auto remove after 5 seconds
                setTimeout(() => {
                    notification.classList.add('translate-x-full');
                    setTimeout(() => notification.remove(), 500);
                }, 5000);
            }

            createRipple(event) {
                const button = event.currentTarget;
                const rect = button.getBoundingClientRect();
                const size = Math.max(rect.width, rect.height);
                const x = event.clientX - rect.left - size / 2;
                const y = event.clientY - rect.top - size / 2;
                
                const ripple = document.createElement('div');
                ripple.style.cssText = `
                    position: absolute;
                    width: ${size}px;
                    height: ${size}px;
                    left: ${x}px;
                    top: ${y}px;
                    background: rgba(255, 255, 255, 0.3);
                    border-radius: 50%;
                    transform: scale(0);
                    animation: ripple 0.6s linear;
                    pointer-events: none;
                `;
                
                button.appendChild(ripple);
                
                setTimeout(() => ripple.remove(), 600);
            }

            initParticles() {
                const particleContainer = document.querySelector('.floating-particles');
                if (!particleContainer) return;
                
                // Create additional particles dynamically
                for (let i = 0; i < 15; i++) {
                    const particle = document.createElement('div');
                    particle.className = 'particle';
                    particle.style.left = `${Math.random() * 100}%`;
                    particle.style.animationDelay = `${Math.random() * 8}s`;
                    particle.style.animationDuration = `${8 + Math.random() * 4}s`;
                    
                    // Random colors
                    const colors = ['rgba(102, 126, 234, 0.6)', 'rgba(139, 92, 246, 0.6)', 'rgba(6, 182, 212, 0.6)', 'rgba(16, 185, 129, 0.6)'];
                    particle.style.background = colors[Math.floor(Math.random() * colors.length)];
                    
                    particleContainer.appendChild(particle);
                }
            }

            setupIntersectionObserver() {
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.style.animationPlayState = 'running';
                            
                            // Add stagger effect for cards
                            if (entry.target.classList.contains('profile-card')) {
                                entry.target.style.transform = 'translateY(0) scale(1)';
                                entry.target.style.opacity = '1';
                            }
                        }
                    });
                }, {
                    threshold: 0.1,
                    rootMargin: '50px'
                });

                // Observe all animated elements
                document.querySelectorAll('.slide-in-left, .slide-in-right, .fade-in-up, .scale-in, .profile-card').forEach(el => {
                    observer.observe(el);
                });
            }
        }

        // Initialize the profile manager when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            new FuturisticProfileManager();
        });

        // Add CSS animation for ripple effect
        const style = document.createElement('style');
        style.textContent = `
            @@keyframes ripple {
                to {
                    transform: scale(4);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);

        // Handle TempData messages
        @if (TempData["Info"] != null)
        {
            <text>
            setTimeout(() => {
                if (typeof FuturisticProfileManager !== 'undefined') {
                    const manager = new FuturisticProfileManager();
                    manager.showNotification('@TempData["Info"]', 'success');
                }
            }, 500);
            </text>
        }

        @if (TempData["Error"] != null)
        {
            <text>
            setTimeout(() => {
                if (typeof FuturisticProfileManager !== 'undefined') {
                    const manager = new FuturisticProfileManager();
                    manager.showNotification('@TempData["Error"]', 'error');
                }
            }, 500);
            </text>
        }
    </script>
}
