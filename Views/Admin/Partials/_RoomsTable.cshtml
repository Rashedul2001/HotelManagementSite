@model HotelManagementSite.Models.Temp.RoomViewModel

<!-- Rooms Table -->
<div class="table-container">
    <div class="overflow-x-auto">
        <table class="w-full">
            <thead class="border-b border-white/10 bg-white/10">
                <tr>
                    <th class="p-6 text-left font-semibold text-gray-700">Room</th>
                    <th class="p-6 text-left font-semibold text-gray-700">Type</th>
                    <th class="p-6 text-left font-semibold text-gray-700">Status</th>
                    <th class="p-6 text-left font-semibold text-gray-700">Price</th>
                    <th class="p-6 text-left font-semibold text-gray-700">Capacity</th>
                    <th class="p-6 text-left font-semibold text-gray-700">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var room in Model.Rooms.Select((room, index) => new { room, index }))
                {
                    <tr class="animate-slide-up table-row" style="animation-delay: @(room.index * 100)ms">
                        <td class="p-6">
                            <div class="flex items-center space-x-4">
                                <div class="flex h-10 w-10 items-center justify-center rounded-full bg-gradient-to-br from-purple-400 to-pink-500 shadow-lg">
                                    @await Html.PartialAsync("Icons/BedIcon", "text-white")
                                </div>
                                <div>
                                    <div class="font-semibold text-gray-900">Room @room.room.Number</div>
                                    <div class="text-sm text-gray-600">Floor @room.room.Floor</div>
                                </div>
                            </div>
                        </td>
                        <td class="p-6">
                            <span class="inline-flex items-center rounded-full bg-purple-100 px-2.5 py-0.5 text-xs font-medium text-purple-800">
                                @room.room.Type
                            </span>
                        </td>
                        <td class="p-6">
                            @{
                                var statusClass = room.room.Status switch
                                {
                                    "Available" => "bg-green-100 text-green-800",
                                    "Occupied" => "bg-red-100 text-red-800",
                                    "Maintenance" => "bg-yellow-100 text-yellow-800",
                                    _ => "bg-gray-100 text-gray-800"
                                };
                            }
                            <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium @statusClass">
                                @room.room.Status
                            </span>
                        </td>
                        <td class="p-6">
                            <span class="font-semibold text-gray-900">$@room.room.Price</span>
                            <span class="text-sm text-gray-600">/night</span>
                        </td>
                        <td class="p-6 text-gray-700">@room.room.Capacity guests</td>
                        <td class="p-6">
                            <div class="flex space-x-2">
                                <button class="rounded-lg p-2 transition-colors duration-200 hover:bg-blue-100 hover:text-blue-600" title="Edit Room">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="rounded-lg p-2 transition-colors duration-200 hover:bg-red-100 hover:text-red-600" title="Delete Room">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Pagination -->
<div class="flex items-center justify-between">
    <div class="text-sm text-gray-600">
        Showing @((Model.CurrentPage - 1) * Model.ItemsPerPage + 1) to @(Math.Min(Model.CurrentPage * Model.ItemsPerPage, Model.TotalRooms)) of @Model.TotalRooms rooms
    </div>
    <div class="flex items-center space-x-2">
        @if (Model.CurrentPage > 1)
        {
            <a href="@Url.Action("Rooms", new { searchTerm = Model.SearchTerm, sortBy = Model.SortBy, page = Model.CurrentPage - 1 })" 
               class="rounded-lg border border-white/20 bg-white/50 px-3 py-2 backdrop-blur-sm transition-all duration-200 hover:bg-white/70">
                <i class="fas fa-chevron-left"></i>
            </a>
        }
        
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <a href="@Url.Action("Rooms", new { searchTerm = Model.SearchTerm, sortBy = Model.SortBy, page = i })" 
               class="rounded-lg px-3 py-2 transition-all duration-200 @(i == Model.CurrentPage ? "bg-gradient-to-r from-blue-500 to-purple-600 text-white" : "bg-white/50 backdrop-blur-sm border border-white/20 hover:bg-white/70 text-gray-700")">
                @i
            </a>
        }
        
        @if (Model.CurrentPage < Model.TotalPages)
        {
            <a href="@Url.Action("Rooms", new { searchTerm = Model.SearchTerm, sortBy = Model.SortBy, page = Model.CurrentPage + 1 })" 
               class="rounded-lg border border-white/20 bg-white/50 px-3 py-2 backdrop-blur-sm transition-all duration-200 hover:bg-white/70">
                <i class="fas fa-chevron-right"></i>
            </a>
        }
    </div>
</div>
