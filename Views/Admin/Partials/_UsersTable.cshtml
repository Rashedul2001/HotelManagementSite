@model HotelManagementSite.Models.Temp.UserViewModel

<!-- Users Table -->
<div class="table-container">
    <div class="overflow-x-auto">
        <table class="w-full">
            <thead class="border-b border-white/10 bg-white/10">
                <tr>
                    <th class="p-6 text-left font-semibold text-gray-700">User</th>
                    <th class="p-6 text-left font-semibold text-gray-700">Role</th>
                    <th class="p-6 text-left font-semibold text-gray-700">Status</th>
                    <th class="p-6 text-left font-semibold text-gray-700">Join Date</th>
                    <th class="p-6 text-left font-semibold text-gray-700">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Model.Users.Select((user, index) => new { user, index }))
                {
                    <tr class="animate-slide-up table-row" style="animation-delay: @(user.index * 100)ms">
                        <td class="p-6">
                            <div class="flex items-center space-x-4">
                                <div class="flex h-10 w-10 items-center justify-center rounded-full bg-gradient-to-br from-blue-400 to-purple-500 shadow-lg">
                                    @await Html.PartialAsync("Icons/UsersIcon", "h-6 w-6 text-white")
                                    <div class="text-white"></div>
                                </div>
                                <div>
                                    <div class="font-semibold text-gray-900">@user.user.Name</div>
                                    <div class="text-sm text-gray-600">@user.user.Email</div>
                                </div>
                            </div>
                        </td>
                        <td class="p-6">
                            <span class="inline-flex items-center rounded-full bg-blue-100 px-2.5 py-0.5 text-xs font-medium text-blue-800">
                                @user.user.Role
                            </span>
                        </td>
                        <td class="p-6">
                            <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium @(user.user.Status == "Active" ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                @user.user.Status
                            </span>
                        </td>
                        <td class="p-6 text-gray-700">@user.user.JoinDate.ToString("yyyy-MM-dd")</td>
                        <td class="p-6">
                            <div class="flex space-x-2">
                                <button class="rounded-lg p-2 transition-colors duration-200 hover:bg-blue-100 hover:text-blue-600" title="Edit User">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="rounded-lg p-2 transition-colors duration-200 hover:bg-red-100 hover:text-red-600" title="Delete User">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Pagination -->
<div class="flex items-center justify-between">
    <div class="text-sm text-gray-600">
        Showing @((Model.CurrentPage - 1) * Model.ItemsPerPage + 1) to @(Math.Min(Model.CurrentPage * Model.ItemsPerPage, Model.TotalUsers)) of @Model.TotalUsers users
    </div>
    <div class="flex items-center space-x-2">
        @if (Model.CurrentPage > 1)
        {
            <a href="@Url.Action("Users", new { searchTerm = Model.SearchTerm, sortBy = Model.SortBy, page = Model.CurrentPage - 1 })" 
               class="rounded-lg border border-white/20 bg-white/50 px-3 py-2 backdrop-blur-sm transition-all duration-200 hover:bg-white/70">
                <i class="fas fa-chevron-left"></i>
            </a>
        }
        
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <a href="@Url.Action("Users", new { searchTerm = Model.SearchTerm, sortBy = Model.SortBy, page = i })" 
               class="rounded-lg px-3 py-2 transition-all duration-200 @(i == Model.CurrentPage ? "bg-gradient-to-r from-blue-500 to-purple-600 text-white" : "bg-white/50 backdrop-blur-sm border border-white/20 hover:bg-white/70 text-gray-700")">
                @i
            </a>
        }
        
        @if (Model.CurrentPage < Model.TotalPages)
        {
            <a href="@Url.Action("Users", new { searchTerm = Model.SearchTerm, sortBy = Model.SortBy, page = Model.CurrentPage + 1 })" 
               class="rounded-lg border border-white/20 bg-white/50 px-3 py-2 backdrop-blur-sm transition-all duration-200 hover:bg-white/70">
                <i class="fas fa-chevron-right"></i>
            </a>
        }
    </div>
</div>
