@* implement the sorting and searching methods  *@
@* implement the pagination like rooms has later *@

@model IEnumerable< HotelManagementSite.Models.ViewModels.UserModel>
@{
	var searchTerm = ViewBag.SearchTerm as string ?? string.Empty;
	var sortBy = ViewBag.SortBy as string ?? "name";
	ViewData["Title"] = "Hotel Users";
	Layout = "_AdminLayout";

}

<!-- Main Content -->
<main class="main-content">
	<div class="p-8">
		<div class="animate-fade-in space-y-6">
			<!-- Header -->
			<div class="flex flex-col items-start justify-between gap-4 sm:flex-row sm:items-center">
				<div>
					<h1 class="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-3xl font-bold text-transparent">
						Hotel Users
					</h1>
					<p class="mt-1 text-gray-600">Manage your hotel staff and users</p>
				</div>

				@* Create User Modal Trigger *@
				<button id="openModalBtn" class="animate-pulse-glow transform rounded-lg bg-gradient-to-r from-blue-500 to-purple-600 px-6 py-3 font-bold text-white shadow-lg transition-all duration-300 hover:scale-105 hover:from-blue-600 hover:to-purple-700">
					<span class="flex items-center space-x-2">
						<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
						</svg>
						<span>Create New User</span>
					</span>
				</button>
			</div>

			<!-- Search and Sort -->
			<form method="get" class="flex flex-col items-center justify-between gap-4 sm:flex-row">
				<div class="relative max-w-md flex-1">
					<i class="fas fa-search -translate-y-1/2 absolute left-3 top-1/2 transform text-gray-400"></i>
					<input type="text" name="searchTerm" value="@searchTerm" placeholder="Search users..." class="form-input pl-10" />
				</div>
				<div class="flex gap-2">
					<select name="sortBy" class="form-select">
						<option value="name" selected="@(sortBy == "name")">Sort by: Name</option>
						<option value="role" selected="@(sortBy == "role")">Sort by: Role</option>
						<option value="status" selected="@(sortBy == "status")">Sort by: Status</option>
						<option value="joindate" selected="@(sortBy == "joindate")">Sort by: Join Date</option>
					</select>
					<button type="submit" class="rounded-xl bg-blue-500 px-4 py-2 text-white transition-colors duration-200 hover:bg-blue-600">
						<i class="fas fa-search"></i>
					</button>
				</div>
			</form>
			@* All Users *@
			@await Html.PartialAsync("Partials/_UsersTable", Model)
		</div>
	</div>
</main>
@* // Modal for creating a new user *@
@await Html.PartialAsync("Partials/_CreateUserModal")



@section Styles {

	@* Styles for create modal *@
	<style>
		.glass-effect {
			background: rgba(255, 255, 255, 0.1);
			backdrop-filter: blur(10px);
			border: 1px solid rgba(255, 255, 255, 0.2);
		}

		.neon-border {
			box-shadow: 0 0 10px rgba(59, 130, 246, 0.5), inset 0 0 10px rgba(59, 130, 246, 0.1);
		}

		.input-glow:focus {
			box-shadow: 0 0 15px rgba(59, 130, 246, 0.6);
			border-color: rgba(59, 130, 246, 0.8);
		}

		.gradient-text {
			background: linear-gradient(45deg, #3b82f6, #8b5cf6, #06b6d4);
			-webkit-background-clip: text;
			-webkit-text-fill-color: transparent;
			background-clip: text;
		}
	</style>





}

@section Scripts {
	<script>
		// Auto-submit form on input change
		$('input[name="searchTerm"], select[name="sortBy"]').on('change input', function() {
			$(this).closest('form').submit();
		});

		class CreateUserModal {
			constructor() {
				this.modal = document.getElementById('modalBackdrop');
				this.modalContent = document.getElementById('modalContent');
				this.openBtn = document.getElementById('openModalBtn');
				this.closeBtn = document.getElementById('closeModalBtn');
				this.cancelBtn = document.getElementById('cancelBtn');
				this.form = document.getElementById('createUserForm');
				this.profileImageInput = document.querySelector('input[name="ProfileImage"]');
				this.imagePreview = document.getElementById('imagePreview');

				this.init();
			}

			init() {
				this.bindEvents();
				this.setupImagePreview();
				this.setupFormValidation();
			}

			bindEvents() {
				this.openBtn.addEventListener('click', () => this.openModal());
				this.closeBtn.addEventListener('click', () => this.closeModal());
				this.cancelBtn.addEventListener('click', () => this.closeModal());

				this.form.addEventListener('submit', (e) => this.handleSubmit(e));

				// Escape key to close modal
				document.addEventListener('keydown', (e) => {
					if (e.key === 'Escape' && !this.modal.classList.contains('hidden')) {
						this.closeModal();
					}
				});
			}

			setupImagePreview() {
				if (this.profileImageInput) {
					this.profileImageInput.addEventListener('change', (e) => {
						const file = e.target.files[0];
						if (file) {
							// Validate file type
							const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
							if (!allowedTypes.includes(file.type.toLowerCase())) {
								this.showNotification('Invalid image format. Only JPEG, PNG, and GIF are allowed.', 'error');
								e.target.value = '';
								return;
							}

							// Validate file size (5MB)
							if (file.size > 5 * 1024 * 1024) {
								this.showNotification('Image file size cannot exceed 5MB.', 'error');
								e.target.value = '';
								return;
							}

							const reader = new FileReader();
							reader.onload = (e) => {
								this.imagePreview.innerHTML = `
									<img src="${e.target.result}" alt="Profile Preview"
										 class="h-full w-full rounded-full object-cover">
								`;
							};
							reader.readAsDataURL(file);
						}
					});
				}
			}

			setupFormValidation() {
				const password = document.getElementById('Password');
				const confirmPassword = document.getElementById('ConfirmPassword');

				if (password && confirmPassword) {
					confirmPassword.addEventListener('input', () => {
						if (password.value !== confirmPassword.value) {
							confirmPassword.setCustomValidity('Passwords do not match');
						} else {
							confirmPassword.setCustomValidity('');
						}
					});
				}
			}

			openModal() {
				this.modal.classList.remove('hidden');
				document.body.style.overflow = 'hidden';

				// Add stagger animation to form fields
				const formFields = this.form.querySelectorAll('input, textarea, select');
				formFields.forEach((field, index) => {
					field.style.opacity = '0';
					field.style.transform = 'translateY(20px)';
					setTimeout(() => {
						field.style.transition = 'all 0.3s ease-out';
						field.style.opacity = '1';
						field.style.transform = 'translateY(0)';
					}, index * 50);
				});
			}

			closeModal() {
				this.modalContent.style.transform = 'translateY(-100px)';
				this.modalContent.style.opacity = '0';

				setTimeout(() => {
					this.modal.classList.add('hidden');
					document.body.style.overflow = 'auto';
					this.resetForm();
					this.modalContent.style.transform = '';
					this.modalContent.style.opacity = '';
				}, 300);
			}

			resetForm() {
				this.form.reset();
				this.clearErrors();
				this.imagePreview.innerHTML = `
					<svg class="h-16 w-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
					</svg>
				`;
			}

			clearErrors() {
				const errorElements = this.form.querySelectorAll('.error-message');
				errorElements.forEach(el => el.remove());

				const inputs = this.form.querySelectorAll('input, select, textarea');
				inputs.forEach(input => {
					input.classList.remove('border-red-500');
				});
			}

			showFieldErrors(errors) {
				this.clearErrors();

				errors.forEach(error => {
					// Try to match field names from error messages
					const field = this.extractFieldFromError(error);
					const input = this.form.querySelector(`[name="${field}"]`);

					if (input) {
						input.classList.add('border-red-500');

						const errorDiv = document.createElement('div');
						errorDiv.className = 'error-message text-red-400 text-sm mt-1';
						errorDiv.textContent = error;

						input.parentNode.appendChild(errorDiv);
					}
				});
			}

			extractFieldFromError(errorMessage) {
				const lowerError = errorMessage.toLowerCase();
				if (lowerError.includes('email')) return 'Email';
				if (lowerError.includes('password')) return 'Password';
				if (lowerError.includes('name')) return 'Name';
				if (lowerError.includes('role')) return 'Role';
				if (lowerError.includes('phone')) return 'PhoneNumber';
				if (lowerError.includes('nid')) return 'NID';
				if (lowerError.includes('address')) return 'Address';
				if (lowerError.includes('about')) return 'About';
				return '';
			}

			async handleSubmit(e) {
				e.preventDefault();

				if (!this.form.checkValidity()) {
					this.form.reportValidity();
					return;
				}

				// Show loading state
				const submitBtn = document.getElementById('submitBtn');
				const originalContent = submitBtn.innerHTML;

				submitBtn.innerHTML = `
					<span class="flex items-center justify-center space-x-2">
						<svg class="h-5 w-5 animate-spin" fill="none" viewBox="0 0 24 24">
							<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
							<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
						</svg>
						<span>Creating User...</span>
					</span>
				`;
				submitBtn.disabled = true;

				try {
					// Create FormData from form
					const formData = new FormData(this.form);

					const response = await fetch('/Admin/CreateUser', {
						method: 'POST',
						body: formData
					});

					const result = await response.json();

					if (result.success) {
						this.showSuccessMessage(result.message);

						// Close modal after success
						setTimeout(() => {
							this.closeModal();
							// Refresh the page to show updated data
							location.reload();
						}, 2000);
					} else {
						this.showErrorMessage(result.message || 'User creation failed', result.errors);
					}
				} catch (error) {
					console.error('Error creating user:', error);
					this.showErrorMessage('An error occurred while creating the user. Please try again.');
				} finally {
					// Reset button
					submitBtn.innerHTML = originalContent;
					submitBtn.disabled = false;
				}
			}

			showSuccessMessage(message) {
				const successDiv = document.createElement('div');
				successDiv.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-[60] animate-slide-in';
				successDiv.innerHTML = `
					<div class="flex items-center space-x-2">
						<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
						</svg>
						<span>${message}</span>
					</div>
				`;

				document.body.appendChild(successDiv);

				setTimeout(() => {
					successDiv.remove();
				}, 3000);
			}

			showErrorMessage(message, errors = []) {
				const errorDiv = document.createElement('div');
				errorDiv.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-[60] animate-slide-in max-w-md';

				let errorContent = `
					<div class="flex items-start space-x-2">
						<svg class="mt-0.5 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
						<div>
							<div class="font-medium">${message}</div>
				`;

				if (errors && errors.length > 0) {
					errorContent += `
						<ul class="mt-1 list-inside list-disc text-sm">
							${errors.map(error => `<li>${error}</li>`).join('')}
						</ul>
					`;
				}

				errorContent += `
						</div>
					</div>
				`;

				errorDiv.innerHTML = errorContent;
				document.body.appendChild(errorDiv);

				setTimeout(() => {
					errorDiv.remove();
				}, 5000);
			}
			showNotification(message, type = 'info') {
				const div = document.createElement('div');
				div.className = `
					fixed top-4 right-4 z-[60] px-6 py-3 rounded-lg shadow-lg text-white animate-slide-in
					${type === 'error' ? 'bg-red-500' : type === 'success' ? 'bg-green-500' : 'bg-blue-500'}`;
					div.innerHTML = `<div>${message}</div>`;

			document.body.appendChild(div);

			setTimeout(() => {
				div.remove();
			}, 4000);
		}

		}

		// Initialize the modal when DOM is loaded
		document.addEventListener('DOMContentLoaded', () => {
			new CreateUserModal();
		});
	</script>
}
